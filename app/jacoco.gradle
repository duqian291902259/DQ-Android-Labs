apply plugin: 'jacoco'

jacoco {
    //toolVersion = "0.8.2"
    toolVersion = "0.8.7"
}

//源代码路径
def coverageSourceDirs = [
        "$projectDir\\src\\main\\java",
        //"D:\\DusanAndroid\\Android-Lab-DQ\\app\\src\\main\\"
        //"$projectDir/soloader/src/main/java"
]

//class文件路径
def coverageClassDirs = [
        "$buildDir/intermediates/javac/debug/classes",
        "$buildDir/tmp/kotlin-classes/debug",
        //"D:\\DusanAndroid\\Android-Lab-DQ\\app\\build\\tmp\\kotlin-classes\\debug\\site\\duqian\\kotlin"
]

//这个就是具体解析ec文件的任务，会根据我们指定的class路径、源码路径、ec路径进行解析输出
//jacocoTestReport createDebugCoverageReport

task jacocoTestReportNew(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def dirs = files(files(coverageClassDirs).files.collect {
        fileTree(dir: it,
                // 过滤不需要统计的class文件
                excludes: ['**/R*.class',
                           '**/*$InjectAdapter.class',
                           '**/*$ModuleAdapter.class',
                           '**/*$ViewInjector*.class'
                ])
    })
    getClassDirectories().setFrom(dirs)

    sourceDirectories.setFrom(coverageSourceDirs)

    executionData.setFrom(files("$buildDir/outputs/code_coverage/debugAndroidTest/connected/coverage.ec"))

    doFirst {
        System.out.println("buildDir=$buildDir")
        System.out.println("buildDir=$projectDir")
        //遍历class路径下的所有文件，替换字符
        coverageClassDirs.each { path ->
            new File(path).eachFileRecurse { file ->
                if (file.name.contains('$$')) {
                    System.out.println("file=$file")
                    file.renameTo(file.path.replace('$$', '$'))
                    System.out.println("new file=$file")
                }
            }
        }
    }
}
